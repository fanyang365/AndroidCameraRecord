package com.van.util;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.ImageFormat;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Build;
import android.os.Environment;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.Log;
import android.util.Range;
import android.util.Size;
import android.view.Surface;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import androidx.annotation.NonNull;

public class Camera2Helper extends CameraAbstract{
    private Activity mContext;
    private final String TAG = "Camera2Helper";
    private String mCameraId;
    private OnPreviewSizeListener onPreviewSizeListener;
    private ImageReader imageReader;
    private OnPreviewListener onPreviewListener;

//    private MediaCodec mMediaCodec;

    public Camera2Helper(Activity mContext) {
        this.mContext = mContext;
    }

    /**
     * Camera state: Showing camera preview.
     */
    private static final int STATE_PREVIEW = 0;

    /**
     * Camera state: Waiting for the focus to be locked.
     */
    private static final int STATE_WAITING_LOCK = 1;

    /**
     * Camera state: Waiting for the exposure to be precapture state.
     */
    private static final int STATE_WAITING_PRECAPTURE = 2;

    /**
     * Camera state: Waiting for the exposure state to be something other than precapture.
     */
    private static final int STATE_WAITING_NON_PRECAPTURE = 3;

    /**
     * Camera state: Picture was taken.
     */
    private static final int STATE_PICTURE_TAKEN = 4;

    /**
     * Max preview width that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_WIDTH = 1920;

    /**
     * Max preview height that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_HEIGHT = 1080;

    /**
     * The {@link android.util.Size} of camera preview.
     */
    private Size mPreviewSize;

    /**
     * {@link CaptureRequest.Builder} for the camera preview
     */
    private CaptureRequest.Builder mPreviewRequestBuilder;


    private CameraDevice mCameraDevice;


    /**
     * An additional thread for running tasks that shouldn't block the UI.
     */
    private HandlerThread mBackgroundThread;

    /**
     * A {@link Handler} for running tasks in the background.
     */
    private Handler mBackgroundHandler;
    /**
     * A {@link CameraCaptureSession } for camera preview.
     */
    private CameraCaptureSession mCaptureSession;
    /**
     * Opens the camera specified .
     */


    /**
     * {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}
     */
    private CaptureRequest mPreviewRequest;



    public int getCameraId() {
        return Integer.valueOf(mCameraId);
    }


    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread("CameraBackground");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }


    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        if (mBackgroundThread == null){
            return ;
        }
        mBackgroundThread.quitSafely();
        try {
            mBackgroundThread.join();
            mBackgroundThread = null;
            mBackgroundHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    Range<Integer>[] fpsRanges;
    /**
     * Sets up member variables related to camera.
     *
     * @param width  The width of available size for camera preview
     * @param height The height of available size for camera preview
     */
    @SuppressWarnings("SuspiciousNameCombination")
    private void setUpCameraOutputs(int width, int height) {

        CameraManager manager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);
        try {
            for (String cameraId : manager.getCameraIdList()) {
                CameraCharacteristics characteristics
                        = manager.getCameraCharacteristics(cameraId);

                // We don't use a front facing camera in this sample.
                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {
                    continue;
                }
                StreamConfigurationMap map = characteristics.get(
                        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
                if (map == null) {
                    continue;
                }

                //get fps
                fpsRanges = characteristics.get(CameraCharacteristics.CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES);

                Point displaySize = new Point();
                mContext.getWindowManager().getDefaultDisplay().getSize(displaySize);
                int rotatedPreviewWidth = width;
                int rotatedPreviewHeight = height;
                int maxPreviewWidth = displaySize.x;
                int maxPreviewHeight = displaySize.y;

                Size largest = Collections.max(
                        Arrays.asList(map.getOutputSizes(ImageFormat.YUV_420_888)),
                        new CompareSizesByArea());
                // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
                // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
                // garbage capture data.
                mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),
                        rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
                        maxPreviewHeight, largest);
                largest         = new Size(640, 480);
                mPreviewSize    = largest;

                if (onPreviewSizeListener != null) {
                    onPreviewSizeListener.onSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
                }

                if (onImageAvailableListener != null){
                    imageReader = ImageReader.newInstance(mPreviewSize.getWidth(), mPreviewSize.getHeight(), ImageFormat.YUV_420_888, 2);
                    imageReader.setOnImageAvailableListener(onImageAvailableListener, mBackgroundHandler);
                }

//                imageReader = ImageReader.newInstance(mPreviewSize.getWidth(), mPreviewSize.getHeight(), ImageFormat.YUV_420_888, 2);
//                imageReader.setOnImageAvailableListener(mOnImageAvailableListener, mBackgroundHandler);
                initEncoder();
                mCameraId = cameraId;
                return;
            }
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {

        }
    }

    private Surface mSurface;
    private WriteFileUtil writeFileUtil;
    byte[] bytes    = new byte[1024*1024];
    private void initEncoder(){
        writeFileUtil   = new WriteFileUtil(Environment.getExternalStorageDirectory().toString() + "/11.h264");
        writeFileUtil.createfile();
//        MediaFormat format = MediaFormat.createVideoFormat(MediaFormat.MIMETYPE_VIDEO_AVC,
//                1440, 1080);
//        //颜色空间 从 surface当中获得
//        format.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities
//                .COLOR_FormatSurface);
//        //码率
//        format.setInteger(MediaFormat.KEY_BIT_RATE, 8192 * 1000);
//        format.setInteger(MediaFormat.KEY_BITRATE_MODE, MediaCodecInfo.EncoderCapabilities.BITRATE_MODE_VBR);
//
//        format.setInteger(MediaFormat.KEY_COMPLEXITY, MediaCodecInfo.EncoderCapabilities.BITRATE_MODE_VBR);
//        //帧率
//        format.setInteger(MediaFormat.KEY_FRAME_RATE, 30);
//        //关键帧间隔
//        format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 3);
//        try {
//            //创建编码器
//            mMediaCodec = MediaCodec.createEncoderByType(MediaFormat.MIMETYPE_VIDEO_AVC);
//        }catch (IOException e){
//            e.printStackTrace();
//            return;
//        }
//        mMediaCodec.setCallback(new MediaCodec.Callback() {
//            @Override
//            public void onInputBufferAvailable(@NonNull MediaCodec codec, int index) {
//
//            }
//
//            @Override
//            public void onOutputBufferAvailable(@NonNull MediaCodec codec, int index, @NonNull MediaCodec.BufferInfo info) {
//                ByteBuffer outputBuffer = codec.getOutputBuffer(index);
//                outputBuffer.get(bytes, info.offset, info.size);
//                writeFileUtil.writeFile(bytes, 0, info.size);
//                long		current_time_stamp = System.currentTimeMillis();
//                m_preview_rate++;
//                if ((current_time_stamp-m_last_time_stamp) >= 1000)
//                {
//                    Log.i("Test", "当前帧率="+m_preview_rate+" ,timestamp="+current_time_stamp+",时间差:"+(current_time_stamp-m_last_time_stamp));
//                    m_last_time_stamp 	= current_time_stamp;
//                    m_preview_rate		= 0;
//                }
//                codec.releaseOutputBuffer(index, false);
//            }
//
//            @Override
//            public void onError(@NonNull MediaCodec codec, @NonNull MediaCodec.CodecException e) {
//
//            }
//
//            @Override
//            public void onOutputFormatChanged(@NonNull MediaCodec codec, @NonNull MediaFormat format) {
//
//            }
//        });
//        //配置编码器
//        mMediaCodec.configure(format, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
//        mSurface= mMediaCodec.createInputSurface();
//
////        视频  编码一个可以播放的视频
//        //混合器 (复用器) 将编码的h.264
//        //开启编码
//        mMediaCodec.start();
    }


    public void releaseEncoder(){
//        try {
//            mMediaCodec.stop();
//            mMediaCodec.release();
//            mMediaCodec=null;
//        } catch (Exception e){
//            e.printStackTrace();
//        }
    }

    public Size getSize() {
        return mPreviewSize;
    }

    /**
     * {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its state.
     */
    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {


        @Override
        public void onOpened(@NonNull CameraDevice cameraDevice) {
            // This method is called when the camera is opened.  We start camera preview here.
            mCameraDevice = cameraDevice;
            createCameraPreviewSession();
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
            cameraDevice.close();
            mCameraDevice = null;
        }

        @Override
        public void onError(@NonNull CameraDevice cameraDevice, int error) {
            cameraDevice.close();
            mCameraDevice = null;
        }

    };


    /**
     * Creates a new {@link CameraCaptureSession} for camera preview.
     */
    private void createCameraPreviewSession() {
        try {

            // This is the output Surface we need to start preview.

            Log.i("Test", "设置分辨率width = " + mPreviewSize.getWidth() +" height= "+mPreviewSize.getHeight());
            surfaceTexture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

            Surface surface = new Surface(surfaceTexture);

            // We set up a CaptureRequest.Builder with the output Surface.
            mPreviewRequestBuilder
                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
            List<Surface> lists = new ArrayList<>();
            mPreviewRequestBuilder.addTarget(surface);
            if (imageReader != null && onImageAvailableListener != null){
                mPreviewRequestBuilder.addTarget(imageReader.getSurface());
                lists.add(imageReader.getSurface());
            }
//            mPreviewRequestBuilder.addTarget(imageReader.getSurface());
//            mPreviewRequestBuilder.addTarget(mSurface);
            // 设置预览画面的帧率 视实际情况而定选择一个帧率范围
            for (int i=0; i<fpsRanges.length; i++){
                Log.i("Test", "支持帧率范围 = " + fpsRanges[i].getLower() +" ~ "+fpsRanges[i].getUpper());
            }
            int i = fpsRanges.length-1;
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE, fpsRanges[i]);
            Log.i("Test", "设置帧率范围 = " + fpsRanges[i].getLower() +" ~ "+fpsRanges[i].getUpper());

            // Here, we create a CameraCaptureSession for camera preview.

            lists.add(surface);
            mCameraDevice.createCaptureSession(lists,
                    new CameraCaptureSession.StateCallback() {

                        @Override
                        public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                            // The camera is already closed
                            if (null == mCameraDevice) {
                                return;
                            }

                            // When the session is ready, we start displaying the preview.
                            mCaptureSession = cameraCaptureSession;
                            try {
                                // Auto focus should be continuous for camera preview.
                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
                                // Flash is automatically enabled when necessary.

                                // Finally, we start displaying the camera preview.
                                mPreviewRequest = mPreviewRequestBuilder.build();
                                mCaptureSession.setRepeatingRequest(mPreviewRequest,
                                        mCaptureCallback, mBackgroundHandler);
                            } catch (CameraAccessException e) {
                                e.printStackTrace();
                            }
                        }

                        @Override
                        public void onConfigureFailed(
                                @NonNull CameraCaptureSession cameraCaptureSession) {
                            Log.d(TAG, "onConfigureFailed: ");
                        }
                    }, null
            );
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }


    /**
     * A {@link CameraCaptureSession.CaptureCallback} that handles events related to JPEG capture.
     */
    private CameraCaptureSession.CaptureCallback mCaptureCallback
            = new CameraCaptureSession.CaptureCallback() {

        @Override
        public void onCaptureProgressed(@NonNull CameraCaptureSession session,
                                        @NonNull CaptureRequest request,
                                        @NonNull CaptureResult partialResult) {
        }

        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                       @NonNull CaptureRequest request,
                                       @NonNull TotalCaptureResult result) {
        }

    };


    /**
     * Given {@code choices} of {@code Size}s supported by a camera, choose the smallest one that
     * is at least as large as the respective texture view size, and that is at most as large as the
     * respective max size, and whose aspect ratio matches with the specified value. If such size
     * doesn't exist, choose the largest one that is at most as large as the respective max size,
     * and whose aspect ratio matches with the specified value.
     *
     * @param choices           The list of sizes that the camera supports for the intended output
     *                          class
     * @param textureViewWidth  The width of the texture view relative to sensor coordinate
     * @param textureViewHeight The height of the texture view relative to sensor coordinate
     * @param maxWidth          The maximum width that can be chosen
     * @param maxHeight         The maximum height that can be chosen
     * @param aspectRatio       The aspect ratio
     * @return The optimal {@code Size}, or an arbitrary one if none were big enough
     */
    private static Size chooseOptimalSize(Size[] choices, int textureViewWidth,
                                          int textureViewHeight, int maxWidth, int maxHeight, Size aspectRatio) {

        // Collect the supported resolutions that are at least as big as the preview Surface
        List<Size> bigEnough = new ArrayList<>();
        // Collect the supported resolutions that are smaller than the preview Surface
        List<Size> notBigEnough = new ArrayList<>();
        int w = aspectRatio.getWidth();
        int h = aspectRatio.getHeight();
        for (Size option : choices) {
            if (option.getWidth() <= maxWidth && option.getHeight() <= maxHeight &&
                    option.getHeight() == option.getWidth() * h / w) {
                if (option.getWidth() >= textureViewWidth &&
                        option.getHeight() >= textureViewHeight) {
                    bigEnough.add(option);
                } else {
                    notBigEnough.add(option);
                }
            }
        }

        // Pick the smallest of those big enough. If there is no one big enough, pick the
        // largest of those not big enough.
        if (bigEnough.size() > 0) {
            return Collections.min(bigEnough, new CompareSizesByArea());
        } else if (notBigEnough.size() > 0) {
            return Collections.max(notBigEnough, new CompareSizesByArea());
        } else {
            Log.e("Camera2Helper", "Couldn't find any suitable preview size");
            return choices[0];
        }
    }

    public void setPreviewSizeListener(OnPreviewSizeListener onPreviewSizeListener) {
        this.onPreviewSizeListener = onPreviewSizeListener;
    }

    @Override
    public boolean StartCamera() {
        if (surfaceTexture == null)
            return false;

        startBackgroundThread();

        //设置预览图像的大小，surfaceview的大小。
        setUpCameraOutputs(camera_video_width, camera_video_height);
        CameraManager manager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if (mContext.checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                    // TODO: Consider calling
                    //    Activity#requestPermissions
                    // here to request the missing permissions, and then overriding
                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                    //                                          int[] grantResults)
                    // to handle the case where the user grants the permission. See the documentation
                    // for Activity#requestPermissions for more details.
                    return false;
                }
            }
            manager.openCamera("1", mStateCallback, mBackgroundHandler);
            return true;
        } catch (CameraAccessException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public void StopCamera() {
        if (null != mCaptureSession) {
            mCaptureSession.close();
            mCaptureSession = null;
        }
        if (null != mCameraDevice) {
            mCameraDevice.close();
            mCameraDevice = null;
        }

        releaseEncoder();

//        if (mSurfaceTexture != null) {
//            mSurfaceTexture.release();
//            mSurfaceTexture = null;
//        }
        stopBackgroundThread();
    }


    /**
     * Compares two {@code Size}s based on their areas.
     */
    static class CompareSizesByArea implements Comparator<Size> {

        @Override
        public int compare(Size lhs, Size rhs) {
            // We cast here to ensure the multiplications won't overflow
            return Long.signum((long) lhs.getWidth() * lhs.getHeight() -
                    (long) rhs.getWidth() * rhs.getHeight());
        }

    }

    public long				m_last_time_stamp 	= System.currentTimeMillis();
    public int				m_preview_rate		= 0;

    private ImageReader.OnImageAvailableListener onImageAvailableListener;

    public ImageReader.OnImageAvailableListener getOnImageAvailableListener() {
        return onImageAvailableListener;
    }

    public void setOnImageAvailableListener(ImageReader.OnImageAvailableListener onImageAvailableListener) {
        this.onImageAvailableListener = onImageAvailableListener;
    }

    private ImageReader.OnImageAvailableListener mOnImageAvailableListener = new ImageReader.OnImageAvailableListener() {
        @Override
        public void onImageAvailable(ImageReader reader) {
            Image image = reader.acquireNextImage();
            if (image == null) {
                return;
            }
//
//            Image.Plane[] planes = image.getPlanes();
//            int width = image.getWidth();
//            int height = image.getHeight();
//
//            byte[] yBytes = new byte[width * height];
//            byte[] uBytes = new byte[width * height / 4];
//            byte[] vBytes = new byte[width * height / 4];
//            byte[] i420 = new byte[width * height * 3 / 2];
//
//
//
//            for (int i = 0; i < planes.length; i++) {
//                int dstIndex = 0;
//                int uIndex = 0;
//                int vIndex = 0;
//                int pixelStride = planes[i].getPixelStride();
//                int rowStride = planes[i].getRowStride();
//
//                ByteBuffer buffer = planes[i].getBuffer();
//
//                byte[] bytes = new byte[buffer.capacity()];
//
//                buffer.get(bytes);
//                int srcIndex = 0;
//                if (i == 0) {
//                    for (int j = 0; j < height; j++) {
//                        System.arraycopy(bytes, srcIndex, yBytes, dstIndex, width);
//                        srcIndex += rowStride;
//                        dstIndex += width;
//                    }
//                } else if (i == 1) {
//                    for (int j = 0; j < height / 2; j++) {
//                        for (int k = 0; k < width / 2; k++) {
//                            uBytes[dstIndex++] = bytes[srcIndex];
//                            srcIndex += pixelStride;
//                        }
//
//                        if (pixelStride == 2) {
//                            srcIndex += rowStride - width;
//                        } else if (pixelStride == 1) {
//                            srcIndex += rowStride - width / 2;
//                        }
//                    }
//                } else if (i == 2) {
//                    for (int j = 0; j < height / 2; j++) {
//                        for (int k = 0; k < width / 2; k++) {
//                            vBytes[dstIndex++] = bytes[srcIndex];
//                            srcIndex += pixelStride;
//                        }
//
//                        if (pixelStride == 2) {
//                            srcIndex += rowStride - width;
//                        } else if (pixelStride == 1) {
//                            srcIndex += rowStride - width / 2;
//                        }
//                    }
//                }
//                System.arraycopy(yBytes, 0, i420, 0, yBytes.length);
//                System.arraycopy(uBytes, 0, i420, yBytes.length, uBytes.length);
//                System.arraycopy(vBytes, 0, i420, yBytes.length + uBytes.length, vBytes.length);
//
//                if (onPreviewListener != null) {
//                    onPreviewListener.onPreviewFrame(i420, i420.length);
//                }
//
//
//            }
            image.close();
        }
    };

    public void setOnPreviewListener(OnPreviewListener onPreviewListener) {
        this.onPreviewListener = onPreviewListener;
    }

    public interface OnPreviewSizeListener {
        void onSize(int width, int height);
    }

    public interface OnPreviewListener {
        void onPreviewFrame(byte[] data, int len);
    }


    public static final int I420 = 35;
    public static final int NV21 = 17;

    public static boolean supportedImageFormat(Image image) {
        int var1 = image.getFormat();
        switch(var1) {
            case NV21:
            case I420:
            case 842094169:
                return true;
            default:
                return false;
        }
    }

    public static byte[] getImageData(Image image, int imageFormat) {
        if (imageFormat != I420 && imageFormat != NV21) {
            throw new IllegalArgumentException("only support COLOR_FormatI420 and COLOR_FormatNV21");
        } else if (!supportedImageFormat(image)) {
            throw new RuntimeException("can't convert Image to byte array, format " + image.getFormat());
        } else {
            Rect var2 = image.getCropRect();
            int var3 = image.getFormat();
            int var4 = var2.width();
            int var5 = var2.height();
            android.media.Image.Plane[] var6 = image.getPlanes();
            byte[] var7 = new byte[var4 * var5 * ImageFormat.getBitsPerPixel(var3) / 8];
            byte[] var8 = new byte[var6[0].getRowStride()];
            int var9 = 0;
            byte var10 = 1;

            for(int var11 = 0; var11 < var6.length; ++var11) {
                switch(var11) {
                    case 0:
                        var9 = 0;
                        var10 = 1;
                        break;
                    case 1:
                        if (imageFormat == I420) {
                            var9 = var4 * var5;
                            var10 = 1;
                        } else if (imageFormat == NV21) {
                            var9 = var4 * var5 + 1;
                            var10 = 2;
                        }
                        break;
                    case 2:
                        if (imageFormat == I420) {
                            var9 = (int)((double)(var4 * var5) * 1.25D);
                            var10 = 1;
                        } else if (imageFormat == NV21) {
                            var9 = var4 * var5;
                            var10 = 2;
                        }
                }

                ByteBuffer var12 = var6[var11].getBuffer();
                int var13 = var6[var11].getRowStride();
                int var14 = var6[var11].getPixelStride();
                int var15 = var11 == 0 ? 0 : 1;
                int var16 = var4 >> var15;
                int var17 = var5 >> var15;
                var12.position(var13 * (var2.top >> var15) + var14 * (var2.left >> var15));

                for(int var18 = 0; var18 < var17; ++var18) {
                    int var19;
                    if (var14 == 1 && var10 == 1) {
                        var19 = var16;
                        var12.get(var7, var9, var16);
                        var9 += var16;
                    } else {
                        var19 = (var16 - 1) * var14 + 1;
                        var12.get(var8, 0, var19);

                        for(int var20 = 0; var20 < var16; ++var20) {
                            var7[var9] = var8[var20 * var14];
                            var9 += var10;
                        }
                    }

                    if (var18 < var17 - 1) {
                        var12.position(var12.position() + var13 - var19);
                    }
                }
            }

            return var7;
        }
    }
}
